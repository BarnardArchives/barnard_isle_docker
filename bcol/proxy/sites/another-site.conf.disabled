
user  nginx;
worker_processes  4;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    keepalive_timeout  65;   
    # DEFINE OUR UPSTREAMS (load balance and proxy)
    # Defines upstream servers based on Docker SERVICE NAMES.
    # 
    # Why "upstream"?  It is more representative of what happens when you replicate docker services.
    # To further explain: if we replicate the docker service "apache", Docker's DNS will return several A records.
    #
    # and of course nb:
    # This also might defeat the purpose of letting DOCKER do the balancing, but I hope that this can serve as a start.
    upstream fedora {
        server fedora:8080 fail_timeout=0;
    }  

    upstream solr {
        server solr:8080 fail_timeout=0;
    }

    upstream web {
        server apache:443 fail_timeout=0;
    }

    # Redirect to SSL, nothing fancy.
    server {
        listen 80;
        
        server_name     lucy.benjaminrosner.com belle.benjaminrosner.com *.arebenji.com;
        
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2;

        ####
        # Server Alais
        server_name     lucy.benjaminrosner.com belle.benjaminrosner.com, *.arebenji.com;
        # Server Certificates (EXTERNAL CERTS)
        ssl_certificate     /certs/benjaminrosner.com.chain.crt;
        ssl_certificate_key     /certs/benjaminrosner.com.key;
        ssl_dhparam     /certs/dhparam.pem;
        ####

        ssl_session_timeout     10m;
        ssl_session_cache   shared:SSL:10m;
        ssl_session_tickets     off;

        # intermediate configuration. tweak to your needs.
        ssl_prefer_server_ciphers on;
        ssl_protocols   TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

        # OCSP Stapling ---
        # fetch OCSP records from URL in ssl_certificate and cache them
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # HSTS
        add_header Strict-Transport-Security max-age=15768000;

        # Proxy headers.
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;

        # Proxy Drupal.
        location / {
            proxy_pass https://web;
        }

        # Proxy and rewrite adore-djatoka.  Recall we're intrastack.
        location /adore-djatoka  {

            # If we are requesting from resolver, remove https from the query string of the image resource and rewrite.
            # NB: There are several potential issues to using such a greedy regex.  If it could be limited to just rewrite calls for _this_ $host that would be desirable behavior.
            # e.g. stub: $host isin $args ? rewrite : return;
            if ($args ~* ^(.*)(rft_id=https)(.*)$) {
                set $args $1rft_id=http$3;
            rewrite ^(.*)$ $1;
            }
            proxy_pass http://fedora/adore-djatoka;
        }

        # Start all of the FEDORA stuffs
        location /fedora/get {
            proxy_pass http://fedora/fedora/get;
        }

        location /fedora/services {
            proxy_pass http://fedora/fedora/services;
        }

        location /fedora/describe {
            proxy_pass http://fedora/fedora/describe;
        }

        location /fedora/risearch {
            proxy_pass http://fedora/fedora/risearch;
        }
    }
}
