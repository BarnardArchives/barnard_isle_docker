version: '2'
# ISLE Alpha 2, for Development and Testing.
# Usernames and passwords to login to Tomcat on services fedora and solr is: admin,ild_tc_adm_2018 
# this is specified in the default tomcat-users.xml and SHOULD be replaced in production.  I think for testing purposes, default tomcat-users is fine.

#Define our services.
services:

  # PHPMyAdmin is a MySQL administration GUI.  It's helpful for me!  https://www.phpmyadmin.net/
  # Connect to this container @ http://<hostip>:8081 - the sql host is "mysql" and user is "root" with password set in the mysql service ENV.
  myadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    environment:
      - PMA_ARBITRARY=1
    networks:
      - isleinternal
    ports: 
      - 8081:80
    volumes:
      - /sessions
    depends_on:
      - mysql
    restart: no   ## other options are "no" "unless-stopped" "on-failure".  We need a health check for the latter most option.


  mysql:
    image: islandoracollabgroup/isle-mysql
    container_name: isle-a2-mysql
    hostname: mysql # NB: unnecessary?
    environment:
      - MYSQL_ROOT_PASSWORD=barnard123 # This is for development; on production the root password will not be stored in the compose.
    networks:
      - isleinternal
    ports:
      - "3306:3306"
    volumes:
      # - ./bcol/mysql/data:/sql_databases_for_import # Place SQL dump files here;  note:  I've been using phpmyadmin and uploading the .sql.gz files (which are on my desktop) this way.
      # A note about the line above.  Once your data is imported it is placed into the volume called "db_data" described next. 
      - db_data:/var/lib/mysql
      # The above data volume WILL persist across containers - you are NOT required to repopulate your DBs if you stop or rm the container.
      - ./bcol/mysql/config/my.cnf:/etc/alternatives/my.cnf:ro # This is likely deprecated, tlk to Gavin.
    restart: unless-stopped


  fedora:
    image: islandoracollabgroup/isle-fedora
    container_name: isle-a2-fedora
    hostname: fedora
    networks:
      - isleinternal
    ports:
      - "8080:8080"
      - "8777:80"
    tty: true
    depends_on:
      - mysql
      - solr
    volumes:
    ## Fedora datastore!
    - /mnt/barnard/islandora/fedora/data:/usr/local/fedora/data # Barnard's Fedora data folder and all subfolders from bare metal instance.
    ## Fedora config
    - ./bcol/fedora/config/fedora.fcfg:/usr/local/fedora/server/config/fedora.fcfg # Make sure your jbdc mysql string is correct: username, password, and database name.
    - ./bcol/fedora/config/fedora-users.xml:/usr/local/fedora/server/config/fedora-users.xml # Our Fedora Users
    - ./bcol/fedora/config/filter-drupal.xml:/usr/local/fedora/server/config/filter-drupal.xml # hostname for mysql server is "mysql"
    ## FGS config
    - ./bcol/fedoragsearch/config/fgsconfigFinal/fedoragsearch.properties:/usr/local/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/fedoragsearch.properties
    - ./bcol/fedoragsearch/config/fgsconfigFinal/fgsconfigObjects.properties:/usr/local/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/fgsconfigObjects.properties
    - ./bcol/fedoragsearch/config/fgsconfigFinal/index/FgsIndex/index.properties:/usr/local/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/index.properties
    - ./bcol/fedoragsearch/config/fgsconfigFinal/repository/FgsRepos/repository.properties:/usr/local/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/repository/FgsRepos/repository.properties
    restart: unless-stopped


  solr:
    image: islandoracollabgroup/isle-solr
    container_name: isle-a2-solr
    hostname: solr
    networks:
      - isleinternal
    ports:
      - "8091:8080"
      - "8983:8983"
    tty: true
    depends_on:
      - mysql 
    volumes:
    - /mnt/barnard/islandora/fedora/solr/collection1/data:/usr/local/solr/collection1/data  # A COMPLETE OVERWRITE WITH BC'S DATA
    - /mnt/barnard/islandora/fedora/solr/collection1/conf/schema.xml:/usr/local/solr/collection1/conf/schema.xml  # A COMPLETE OVERWRITE WITH BC'S DATA
    restart: unless-stopped


  apache:
    image: islandoracollabgroup/isle-apache
    container_name: isle-a2-apache
    networks:
      isleinternal: 
        aliases:   # this is here for IP resolution of those FQDN's to the INTERNAL NETWORK IP address.
         - lucy.benjaminrosner.com  # FQDN of VHOST 1  (so that the docker network can resolve the IP address of this container internally and service requests for it)
         - belle.benjaminrosner.com  # FQDN of VHOST 2...n 
    tty: true
    depends_on:
      - mysql
      - fedora
      - solr
    volumes:
      - ./bcol/apache/conf/sites-enabled:/etc/apache2/sites-enabled # These need to be baked into the image and replace existing defaults.
      - ./bcol/apache/conf/certs:/certs:ro  # SNAKEOIL Certificate DIR. This container is only on the INTERNAL NETWORK.
      - /mnt/barnard/www/html/islandora:/var/www/html
    restart: unless-stopped


  proxy:
    image: nginx
    container_name: isle-a2-proxy
    networks:
      isleinternal:
      ext_network:
      # docker-external:  ## Please see the defined networks below.  This is only an example and will not work on your host until such a network is created on the host.
        # ipv4_address: 192.168.1.210
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - mysql
      - fedora
      - solr
      - apache
    volumes:
      - ./bcol/proxy/config/nginx.conf:/etc/nginx/nginx.conf:ro  ## Primary - (note, Benjamin's example could likely be simplified way down if there are more familiar with nginx!)
      - ./bcol/proxy/config/sites:/etc/nginx/conf.d:ro ## missed in the first pass - the conf folder (e.g., production.conf, development.conf, etc.) 
                                                       ## this permits more configs so things can be simplified further, by reducing duplication, or just by having different site configs for clarity, etc. (I hope.)
      - ./bcol/proxy/certs:/certs:ro  # REAL Certificate DIR.
    # command: [nginx-debug, '-g', 'daemon off;']  ## Please uncomment this line if you'd like to verbose debug logging.
    restart: unless-stopped 


# Defined networks
networks:
  isleinternal:
  ext_network:
    # Take a look a docker networking, here are things you can do in a compose environment.  lots of this becomes easier with overlays :/
    # EG (and my use case): Linux (maybe Mac) users can use MACVLAN as a way to make hosts on this network appear as though they were directly connected to the network.
    ## https://blog.docker.com/2016/12/understanding-docker-networking-drivers-use-cases/  (nice)
  ## The following is an example.  Do not use it, it is specific to Benjamin's setup!  Do not uncomment unless you understand fully:
  # docker-external:  #  a) how to create a `docker network` using `docker create network` (this is why "external" is true) or b) create the docker-external definition in the compose
    # external: true  # Note that this is the only actual ingress point (from the WAN) for Docker services on my host.  For the SYSADMINS: this is a macvlan to a bonded parent device.


# Defined and saved
volumes:
  db_data:
